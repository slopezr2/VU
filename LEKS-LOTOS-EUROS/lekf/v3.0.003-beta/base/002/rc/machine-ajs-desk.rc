!#######################################################################
!
! AJS desktop
!
!#######################################################################


!----------------------------------------------------------------------
! user names
!----------------------------------------------------------------------

! used for output attributes ...

! name of institution:
user.institution             :  AJS

! extract user long name from environment variable:
user.longname                :  ${USER}


!----------------------------------------------------------------------
! compiler settings
!----------------------------------------------------------------------

! GNU Fortran Compiler
#include base/${my.patch.nr}/rc/compiler-${COMPILER_SUITE}-${COMPILER_VERSION}.rc


!----------------------------------------------------------------------
! mpi wrapper
!----------------------------------------------------------------------

! compiler wrappers for MPI:
mpi.compiler.fc                     :  mpifort
mpi.compiler.fc.openmp              :  mpifort


!----------------------------------------------------------------------
! libraries
!----------------------------------------------------------------------

! (optional) macro to enable udunits library:
!my.udunits.define             :  
!my.udunits.define             :  with_udunits1
my.udunits.define             :  with_udunits2

! (optional) macro to enable linear algebra library:
!my.linalg.define             :  
my.linalg.define             :  with_lapack
!my.linalg.define             :  with_lapack95
!my.linalg.define             :  with_mkl

! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

! Z library (used for compression in HDF):
compiler.lib.z.fflags           : 
compiler.lib.z.libs             : -lz

! JPEG library (used for compression in HDF):
compiler.lib.jpeg.fflags        : 
compiler.lib.jpeg.libs          : -ljpeg

! JASPER library (jpeg compression used in GRIB_API):
compiler.lib.jasper.fflags      : 
compiler.lib.jasper.libs        : -ljasper

! SZ library (used for compression in HDF):
compiler.lib.sz.fflags          : 
compiler.lib.sz.libs            : -L${SZIP_HOME}/lib -lsz \
                                  -Wl,-rpath -Wl,${SZIP_HOME}/lib

!! HDF4 library:
!compiler.lib.hdf4.fflags        : -I${HDF4_HOME}/include
!compiler.lib.hdf4.libs          : -L${HDF4_HOME}/lib -lmfhdf -ldf

! HDF5 library:
compiler.lib.hdf5.fflags        : 
compiler.lib.hdf5.libs          : -L${HDF5_HOME}/lib -lhdf5_hl -lhdf5

! NetCDF library (actually netcdf4 ...)
compiler.lib.netcdf.fflags      : ${compiler.lib.netcdf4.fflags}
compiler.lib.netcdf.libs        : ${compiler.lib.netcdf4.libs}

! NetCDF4 library:
compiler.lib.netcdf4.fflags     : -I/usr/include
compiler.lib.netcdf4.libs       : -L/usr/lib/x86_64-linux-gnu -lnetcdff -lnetcdf \
                                  -Wl,-rpath -Wl,/usr/lib/x86_64-linux-gnu

!! UDUnits library:
!compiler.lib.udunits1.fflags    : -I${UDUNITS_HOME}/include
!compiler.lib.udunits1.libs      : -L${UDUNITS_HOME}/lib -ludunits

! UDUnits2 library:
compiler.lib.udunits2.fflags    : -I/usr/include
compiler.lib.udunits2.libs      : -L/usr/lib/x86_64-linux-gnu -ludunits2

! MPI library:
compiler.lib.mpi.fflags         : 
compiler.lib.mpi.libs           : 

! BLAS library:
compiler.lib.blas.fflags        : 
compiler.lib.blas.libs          : -L${LAPACK_HOME}/lib -lblas

! LAPack library:
compiler.lib.lapack.fflags      : 
compiler.lib.lapack.libs        : -L${LAPACK_HOME}/lib -llapack

!! LAPack95 library:
!compiler.lib.lapack95.fflags    : -I${LAPACK95_HOME}/include
!compiler.lib.lapack95.libs      : -L${LAPACK95_HOME}/lib -lf95_lapack


!----------------------------------------------------------------------
! makedep
!----------------------------------------------------------------------

! Is makedepf90 installed?
! This flag is used in the 'expert.rc' settings:
my.with.makedep            :  True


!----------------------------------------------------------------------
! maker
!----------------------------------------------------------------------

! default number of build jobs that can be used,
! this is passed to 'build.jobs' in the expert rc;
! on this machine, use the number of allocated processes:
my.build.jobs       :  1

! make command; 
! the setup script will insert the 'build.jobs' specified in the expert.rc
! or passed as argument to the setup script:
!
maker               :  make -j %{build.jobs}


!----------------------------------------------------------------------
! MPI runner
!----------------------------------------------------------------------

! command and arguments; no command file written, thus executable and arguments are added
mpirun.command     :  mpiexec
mpirun.args        :  -np ${par.ntask} \
                      --output-filename ${job.name}_%{step}.out

! name of command file; if empty, then executable and arguments are added to the command line
mpirun.cmdfile     :  

! name of host file:
mpirun.hostfile    : 


!----------------------------------------------------------------------
! debugger
!----------------------------------------------------------------------

! debugger type: totalview | idb | kdbg
debugger                :  idb

! command for debugger:
debugger.command        :  idb


!----------------------------------------------------------------------
! jobs
!----------------------------------------------------------------------

! where to submit jobs to by default ?
my.submit.to.default               : foreground

! allowed destinations:
my.submit.to.allowed               : foreground background


! shell to use in job scripts:
! o python scripts:
job.shell.python                   : /usr/bin/env python


!----------------------------------------------------------------------
! shell options
!----------------------------------------------------------------------

! for running in foreground or background;
! add python code that is directly inserted in header

shell.options.default       :

shell.options.init          :  

! number of threads:
#if "${par.openmp}" in ["yes","True","T"] :
my.nthread                  :  ${par.nthread}
#else
my.nthread                  :  1
#endif

shell.options.run           :  \n\
# machine specific settings:\n\
import os\n\
os.putenv( 'OMP_NUM_THREADS', '${my.nthread}' )

shell.options.done          :


!----------------------------------------------------------------------
! model data
!----------------------------------------------------------------------

! the user scratch directory:
my.scratch                    :  ${SCRATCH}

! adhoc ...
MODAS_SCRATCH04               :  ${SCRATCH}

! model data:
MODELS                        :  ${SCRATCH}/models

! project data:
PROJECTS                      :  ${SCRATCH}/projects

! base path to input data files:
LE_DATA                       :  ${MODELS}/LOTOS-EUROS/data
my.data.dir                   :  ${LE_DATA}

! observations:
OBSERVATIONS                  :  ${SCRATCH}/observations
AQORD_HOME                    :  ${OBSERVATIONS}/AQORD

! define grib library:
my.grib.define                :  with_grib_api

!! extra install tasks:
!my.install.tasks              :

