!#######################################################################
!
! Template for machine specific settings.
!
!#######################################################################

!----------------------------------------------------------------------
! user names
!----------------------------------------------------------------------

! used for output attributes ...

! name of institution:
user.institution             :  UNIVERSIDAD EAFIT

! extract user long name from environment variable:
user.longname                :  ${USER}


!----------------------------------------------------------------------
!----------------------------------------------------------------------
! model data
!----------------------------------------------------------------------

! the user scratch directory ;
! this is the base for the run directory:
my.scratch                    :  /disk/kalman/scratch
!my.scratch                    :  ${SCRATCH}

! base path to input data files:
my.data.dir                   :  /disk/kalman/inputdata_Colombia

! dummy ..
OBSERVATIONS                  :  /data/observations

!! extra install tasks, see "install.tasks" in expert.rc:
!my.install.tasks              :


!----------------------------------------------------------------------
! compiler settings
!----------------------------------------------------------------------

! settings for GNU Fortran compiler:
!#include base/${my.patch.nr}/rc/compiler-gcc-5.3.0.rc
#include /home/kalman/GITHUB/dataAssimilation/src/LOTOS-EUROS_CODE/arjo/lekf/lekf/v3.0.003-beta/proj/eafit/000/rc/compiler-gcc-6.3.1.rc


!! template settings for Intel Fortran compiler:
!#include ${my.pycasso.dir}/rc/compiler.intel-14.0.1.rc

! MPI wrappers:
mpi.compiler.fc                     :  mpifort
mpi.compiler.fc.openmp              :  mpifort


!----------------------------------------------------------------------
! libraries
!----------------------------------------------------------------------

! (optional) macro to enable linear algebra library:
!my.linalg.define             :  
my.linalg.define             :  with_lapack
!my.linalg.define             :  with_lapack95
!my.linalg.define             :  with_mkl

! (optional) macro to enable udunits library:
!my.udunits.define             :  
!my.udunits.define             :  with_udunits1
my.udunits.define             :  with_udunits2


!
! * library flags
!

! MPI library:
compiler.lib.mpi.fflags         : -I/usr/lib64/gfortran/modules/mpich
compiler.lib.mpi.libs           : 

! NetCDF library:
!NETCDF_HOME                     : /usr/local
!NETCDF_FORTRAN_HOME             : ${NETCDF_HOME}
OPT                             : ${HOME}/opt
NETCDF_HOME                     : ${OPT}/netcdf/4.4.1.1
NETCDF_FORTRAN_HOME             : ${NETCDF_HOME}/netcdf-fortran/4.4.4/
compiler.lib.netcdf.fflags      : -I${NETCDF_FORTRAN_HOME}/include
compiler.lib.netcdf.libs        : -L${NETCDF_FORTRAN_HOME}/lib -lnetcdff -Wl,-rpath -Wl,${NETCDF_FORTRAN_HOME}/lib \
                                  -L${NETCDF_HOME}/lib -lnetcdf -Wl,-rpath -Wl,${NETCDF_HOME}/lib

!! HDF4 library:
!HDF4_HOME                       : /usr
!compiler.lib.hdf4.fflags        : -I${HDF4_HOME}/include
!compiler.lib.hdf4.libs          : -L${HDF4_HOME}/lib -lmfhdf -ldf -ljpeg -lz

!! HDF5 library:
!HDF5_HOME                       : /usr
!compiler.lib.hdf5.fflags        : -I${HDF5_HOME}/include
!compiler.lib.hdf5.libs          : -L${HDF5_HOME}/lib -lhdf5_hl -lhdf5_fortran -lhdf5
!** Uncommented by jdpinedac
!HDF5_HOME                       : /share/apps/hdf5/1.8.19/intel-2017_update-1
!compiler.lib.hdf5.fflags        : -I${HDF5_HOME}/include
!compiler.lib.hdf5.libs          : -L${HDF5_HOME}/lib -lhdf5_hl -lhdf5_fortran -lhdf5

!! Z library (used for compression in HDF)
!compiler.lib.z.fflags           : 
!compiler.lib.z.libs             : -lz

!! JPEG library (used for compression in HDF)
!JPEG_HOME                       : /usr
!compiler.lib.jpeg.fflags        : 
!compiler.lib.jpeg.libs          : -L${JPEG_HOME}/lib -ljpeg

!! SZ library (used for compression in HDF)
!SZIP_HOME                       : /usr
!compiler.lib.sz.fflags          : -I${SZIP_HOME}/include
!compiler.lib.sz.libs            : -L${SZIP_HOME}/lib -lsz

! UDUnits library:
!UDUNITS_HOME                    :  /usr/local
!compiler.lib.udunits.fflags     : -I${UDUNITS_HOME}/include
!compiler.lib.udunits.libs       : -L${UDUNITS_HOME}/lib -ludunits

! UDUnits library:
compiler.lib.udunits2.fflags    : -I/usr/local/src/udunits-2.2.26/lib
compiler.lib.udunits2.libs      :  /usr/lib64/libudunits2.so.0

! UDUnits library:
!compiler.lib.udunits2.fflags    : -I/usr/local/include
!compiler.lib.udunits2.libs      : -L/usr/local/src/udunits-2.2.24/lib


! blas library:
compiler.lib.blas.fflags          : 
compiler.lib.blas.libs            : /usr/lib64/libblas.so.3.6.1

! Lapack library:
compiler.lib.lapack.fflags        : 
compiler.lib.lapack.libs          : /usr/lib64/liblapack.so.3.6.1

! Lapack95 library:
LAPACK95_HOME                     : /home/kalman/Documentos/lacpack/LAPACK95
compiler.lib.lapack95.fflags      : -I${LAPACK95_HOME}/lapack95_modules
compiler.lib.lapack95.libs        : -L${LAPACK95_HOME}/lib -llapack95

!
!! Intel Math Kernel Library (blas,lapack,...)
!compiler.lib.mkl.fflags         :
!#if "${par.openmp}" in ["T","True"]
!!compiler.lib.mkl.libs           :  -lmkl_intel -lmkl_intel_thread -lmkl_core -liomp5 -lpthread
!#else
!compiler.lib.mkl.libs           :  -lmkl_intel -lmkl_sequential   -lmkl_core
!#endif


!----------------------------------------------------------------------
! makedep
!----------------------------------------------------------------------

! Is makedepf90 installed?
! This flag is used in the 'expert.rc' settings:
my.with.makedep            :  False


!----------------------------------------------------------------------
! maker
!----------------------------------------------------------------------

!
! make command:
!
! ~ default:
maker               :  make
!
! ~ gmake with option to compile multiple source source 
!   at the same time; the setup script will insert the 
!   'build.jobs' number specified in the expert.rc
!   or the number passed as using the '--jobs' argument:
!maker               :  gmake --jobs=%{build.jobs}
!

! default number of build jobs that can be used,
! this is passed to 'build.jobs' in the expert rc;
! eventually set this with an environment variable:
my.build.jobs       :  1


!----------------------------------------------------------------------
! some run time settings ...
!----------------------------------------------------------------------

! number of threads in run step:
#if "${par.openmp}" in ["yes","T","True"] :
my.run.nthread                    :  ${par.nthread}
#elif "${par.openmp}" in ["no","F","False"] :
my.run.nthread                    :  1
#else
#error Could not set number of OpenMP threads for par.openmp "${par.openmp}"
#endif

! number of threads in run step:
#if "${par.mpi}" in ["yes","T","True"] :
my.run.ntask                      :  ${par.ntask}
#elif "${par.mpi}" in ["no","F","False"] :
my.run.ntask                      :  1
#else
#error Could not set number of MPI tasks for par.openmp "${par.mpi}"
#endif

! total number:
my.run.ncpu          :  $(( ${my.run.nthread} * ${my.run.ntask} ))


!----------------------------------------------------------------------
! MPI runner
!----------------------------------------------------------------------

! From HPC login message:
! - use "mpirun.lsf" instead of "mpirun" ?

! comand to start mpi application:
mpirun.command     :  mpiexec
!
! arguments:
!  --n <ntask>                : number of MPI tasks
!  --cpus-per-proc <nthread>  : number of OpenMP threads per task
!  --output-filename <file>   : writes task output to "<file>.<node>.<task>"
! HPC computing nodes:
!   4 sockets, 8 cores/socket
!
!mpirun.args        :  --n ${my.run.ntask} --cpus-per-proc ${my.run.nthread} \
!                        --bind-to-socket --num-sockets 4 --num-cores 8 \
!                        --output-filename ${job.name}.out
!
mpirun.args        :  --n ${my.run.ntask} -outfile-pattern ${job.name}.out

! name of command file; if empty, then executable and arguments are added to the command line
mpirun.cmdfile     :  

! name of host file:
mpirun.hostfile    :


!!----------------------------------------------------------------------
!! runner
!!----------------------------------------------------------------------
!
! Special command needed to run an executable ?
! on some systems, this should be used:
!   dplace -s1 test.x args
! Specify the the special command if needed,
! or keep comment if not necessary:
!runner.command          :  dplace -s1


!!----------------------------------------------------------------------
!! debugger
!!----------------------------------------------------------------------
!
!!
!! Used by 'submit_le' script with the '--debuger' flag.
!!
!
!! debugger type: totalview | idb | kdbg
!debugger                :  kdbg
!
!! command for debugger:
!! o KDE debugger around gdb (Linux systems using gfortran)
!debugger.command        :  kdbg
!! o Intel debugger (for systems with Intel compiler)
!!debugger.command        :  idb -gui
!! o TotalView (IBM)
!!debugger.command        :  totalview -searchPath=${build.sourcedir}


!----------------------------------------------------------------------
! jobs
!----------------------------------------------------------------------

! where to submit jobs to by default ?
my.submit.to.default               : foreground

! allowed destinations:
my.submit.to.allowed               : foreground background
!! if a queue system is available,
!! a run is background is probably not allowed ...
!my.submit.to.allowed               : foreground queue

! shell to use in job scripts:
! o python scripts:
job.shell.python                   : /usr/bin/env python




!----------------------------------------------------------------------
! shell options
!----------------------------------------------------------------------

! for running in foreground or background;
! add python code that is directly inserted in header

shell.options.default       :

shell.options.init          :  

shell.options.run           :  \n\
# machine specific settings:\n\
import os\n\
os.putenv( 'OMP_NUM_THREADS', '${my.run.nthread}' )

shell.options.done          :


!!----------------------------------------------------------------------
!! settings for BSUB queue
!!----------------------------------------------------------------------
!
!! queue system: bsub | qsub | loadleveler
!queue        :  bsub
!
!! list of queue options (default and per step):
!queue.bsub.options.default      :  J q
!queue.bsub.options.init         :  oo eo
!queue.bsub.options.run          :  oo eo n Rspan Rmem
!queue.bsub.options.done         :  oo eo
!
!! * default settings, valid for all steps:
!
!! passed directly:
!queue.bsub.args                 :  
!
!! job name:
!queue.bsub.option.J             :  ${job.name}
!
!! queue name; use 'bqueues' for overview:
!queue.bsub.option.q             :  normal
!
!! python code inserted directly in header;
!! use "\n\" for newlines:
!queue.bsub.code.default         :
!
!! * init step:
!
!! passed directly to bsub:
!queue.bsub.args.init            :  
!
!!! host group:
!!queue.bsub.option.init.m        :  hgregular
!
!! output and error, overwrite existing files:
!queue.bsub.option.init.oo       :  <auto>
!queue.bsub.option.init.eo       :  <auto>
!
!! python code inserted directly in header;
!! use "\n\" for newlines:
!queue.bsub.code.init            :   
!
!! * run step:
!
!! passed directly to bsub:
!queue.bsub.args.run             : 
!
!! host groups
!!  hgregular   : work nodes
!!  hgiband     : work nodes, fast network
!!  hgbigmem    : work nodes, large memory
!!! host group:
!!queue.bsub.option.run.m         :  hgregular
!
!! number of tasks:
!queue.bsub.option.run.n         :  ${my.run.ntask}
!
!! resources: 
!! - single node
!queue.bsub.option.run.Rspan     :  -R "span[hosts=1]"
!! - extra memory in MB
!queue.bsub.option.run.Rmem      :  -R "rusage[mem=850]"
!
!! output and error, overwrite existing files:
!queue.bsub.option.run.oo        :  <auto>
!queue.bsub.option.run.eo        :  <auto>
!
!! python code inserted directly in header;
!! use "\n\" for newlines:
!queue.bsub.code.run             :  \n\
!# machine specific settings:\n\
!import os\n\
!os.putenv( 'OMP_NUM_THREADS', '${my.run.ntask}' )
!
!! * done step:
!
!! passed directly to bsub:
!queue.bsub.args.done            :  
!
!!! host group:
!!queue.bsub.option.done.m        :  hgregular
!
!! output and error, overwrite existing files:
!queue.bsub.option.done.oo       :  <auto>
!queue.bsub.option.done.eo       :  <auto>
!
!! python code inserted directly in header;
!! use "\n\" for newlines:
!queue.bsub.code.done            :
!    :


!----------------------------------------------------------------------
! end
!----------------------------------------------------------------------


