! ======================================================================
! ===
! === LOTOS-EUROS run description,
! === for inclusion in LEKF description.
! ===
! === Default settings for v2.2.001
! ===
! ======================================================================


! ######################################################################
! ###
! ### settings
! ###
! ######################################################################


! ----------------------------------------
! expert settings
! ----------------------------------------

! include expert settings to build source code
#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-expert.rc


! ######################################################################
! ###
! ### source code
! ###
! ######################################################################


! ----------------------------------------
! version
! ----------------------------------------

! base number:
my.le.version     :  v2.2

! patch number:
my.le.patch       :  001

! combined release number:
my.le.release     :  ${my.le.version}.${my.le.patch}

! base directory:
my.le.dir            :  ../../lotos-euros/${my.le.version}


! ----------------------------------------
! source directories
! ----------------------------------------

! The code that will be compiled is collected from one
! or more source directories. A list with the directories
! should be provided, e.g.:
!
!   my.le.source.dirs  :  base/000 proj/newemis proj/mytest ...
!
! The content of the'src', 'bin', and other subdirs of 
! these directories is copied to the build directory,
! in the specified order. Thus, in this example, the files
! in 'proj/newemis/src/' will replace those copied from
! 'base/000/src' etc.
!
my.le.source.dirs      :  ${my.le.dir}/base/${my.le.patch} \
                          ${my.le.dir}/proj/nitrogen-deposition/emission-timing/${my.le.patch}\
                          ${my.le.dir}/proj/nitrogen-deposition/emission-timing/emisv5_1/${my.le.patch}\
                          ${my.le.dir}/proj/cso/${my.le.patch}
!                          ${my.le.dir}/proj/amf/${my.le.patch}


! ----------------------------------------
! parallelisation
! ----------------------------------------

! decomposition:
#if ${par.ntask} <= 1
domains.x         :  1
domains.y         :  1
#elif ${par.ntask} == 2
domains.x         :  2
domains.y         :  1
#elif ${par.ntask} == 4
domains.x         :  2
domains.y         :  2
#elif ${par.ntask} == 6
domains.x         :  2
domains.y         :  3
#elif ${par.ntask} == 7
domains.x         :  1
domains.y         :  7
#elif ${par.ntask} == 8
domains.x         :  2
domains.y         :  4
#elif ${par.ntask} == 14
domains.x         :  2
domains.y         :  7
#elif ${par.ntask} == 16
domains.x         :  4
domains.y         :  4
#elif ${par.ntask} == 32
domains.x         :  4
domains.y         :  8
#elif ${par.ntask} == 36
domains.x         :  6
domains.y         :  6
#elif ${par.ntask} == 28
domains.x         :  4
domains.y         :  7
#elif ${par.ntask} == 56
domains.x         :  8
domains.y         :  7
#else
#error could not set domain decomposition for par.ntask ${par.ntask}
#endif


! ----------------------------------------
! logging
! ----------------------------------------

! write to log files (per domain) in output directory?
! not necessary if job writes file par task already:
log.files                     :  F

! when using log files, still echo root to std.out. ?
log.files.root_to_stdout      :  F

!! for testing; uncomment the code in 'le_grid.F90':
!test.debug.i      :  
!test.debug.j      :  

!! print data values in le_logging:
!test.debug.vars   :  
!test.debug.vars   :  z0m_lu z0m blh halt_crnr_met halt_crnr halt_met halt \
!                     h hp_crnr_met hp_crnr hp airm t_met \
!                     duudz ri_ifs zust sstar tsurf qstar \
!                     tsurf Q0v monin monin_inv \
!                     ustar kz_ifs kz_ifs_lelv
 
! write message when file is opened with c3po?
! used in operational runs to trap missing files:
log.show_filename_on_open                   :  F


! ######################################################################
! ###
! ### run settings : modify if necessary !
! ###
! ######################################################################

!
! --> All settings that setup your simulation.
!

! ----------------------------------------
! time
! ----------------------------------------

! timerange:
#if "${my.year}" == "2018"
timerange.start             :  2018-01-01 00:00:00
timerange.end               :  2019-01-01 00:00:00
#elif "${my.year}" == "2019"
!timerange.start             :  2018-12-01 00:00:00
timerange.start             :  2019-01-01 00:00:00
timerange.end               :  2020-01-01 00:00:00
!timerange.end               :  2019-01-01 23:59:00
#elif "${my.year}" == "2020"
!timerange.start             :  2019-12-01 00:00:00
timerange.start             :  2020-01-01 00:00:00
timerange.end               :  2021-01-01 00:00:00
#else
#error unknown year defined: "${my.year}"
#endif

! run in forecast mode (T|F) ?
! (thus, read forecast meteo series)
forecast.mode               :  F
! reference time for forecast;
! from here onward, read from forecast files:
forecast.timerange.base     :  2012-07-01 00:00:00

! maximum time step for operator spliting loop (minutes);
! output time steps are multiple of this:
timestep.max                :   60


! ----------------------------------------
! horizontal grid
! ----------------------------------------

! 
! ~ either select one of the pre-defined grids:
!

!grid.name         : MACC
!grid.name         : MACC-II
!grid.name         : CAMS-II
!grid.name         : NL-smogprog
!grid.name         : wrfd02
!grid.name         : middle-east
!grid.name         : CAMS50-02
!grid.name         : CAMS50-01
!grid.name         : CAMS50-02-test
grid.name         : DEU


grid.resol        : 25km

!! grid definitions:
!#include base/${my.le.patch}/rc/lotos-euros-regions.rc

! define grid type:
grid.type           :  cartesian
grid.meteo_mapping  :  interpol

#if "${grid.name}" == "middle-east"

! box around Persian Gulf:
!  [40,60] x [20,35]   =   20 x  15 deg
!  at 0.50 x 0.25 deg  =   40 x  60 cells
!  at 0.10 x 0.05 deg  =  200 x 300 cells

! south west corner:
grid.west         :  40.0
grid.south        :  20.0

! resolution: 
#if "${grid.resol}" == "25km"
grid.dlon         : 0.50
grid.dlat         : 0.25
grid.nx           :   40
grid.ny           :   60
#elif "${grid.resol}" == "10km"
grid.dlon         : 0.20
grid.dlat         : 0.10
grid.nx           :  100
grid.ny           :  150
#elif "${grid.resol}" == "5km"
grid.dlon         : 0.10
grid.dlat         : 0.05
grid.nx           :  200
grid.ny           :  300
#else
#error unsupported grid.resol "${grid.resol}"
#endif

#elif "${grid.name}" == "middle-east-x"

! extra cells for oh output:
!   [38,62] x [19,36] =  24 x 17 deg
!  at 0.50 x 0.25 deg  =   48 x  68 cells
!  at 0.10 x 0.05 deg  =  240 x 340 cells
!
! landuse box:  : MiddleEast_e25e65n5n45

! south west corner:
grid.west         :  38.0
grid.south        :  19.0

! resolution: 
#if "${grid.resol}" == "25km"
grid.dlon         : 0.50
grid.dlat         : 0.25
grid.nx           :   48
grid.ny           :   68
#elif "${grid.resol}" == "10km"
grid.dlon         : 0.20
grid.dlat         : 0.10
grid.nx           :  120
grid.ny           :  170
#elif "${grid.resol}" == "5km"
grid.dlon         : 0.10
grid.dlat         : 0.05
grid.nx           :  240
grid.ny           :  340
#else
#error unsupported grid.resol "${grid.resol}"
#endif

#elif "${grid.name}" == "CAMS50-02"

! south-west corner:
grid.west          :  -25.0
grid.south         :   30.0
grid.dlon          :    0.2
grid.dlat          :    0.2
! spacing: 
!grid.nx            :  50
grid.nx            :  350
!grid.ny            :  50
grid.ny            :  210

#elif "${grid.name}" == "CAMS50-01"

! south-west corner:
grid.west          :  -25.0
grid.south         :   30.0
grid.dlon          :    0.1
grid.dlat          :    0.1
! spacing: 
!grid.nx            :  50
grid.nx            :  700
!grid.ny            :  50
grid.ny            :  420

#elif "${grid.name}" == "CAMS50-02-test"

! south-west corner:
grid.west          :    2.0
grid.south         :   49.0
grid.dlon          :    0.2
grid.dlat          :    0.2
! spacing: 
!grid.nx            :  50
grid.nx            :  40
!grid.ny            :  50
grid.ny            :  30
#elif "${grid.name}" == "DEU"
!
! south west corner:
grid.west         :  2.0
grid.south        :  47.0
! resolution: 
grid.dlon         : 0.10
grid.dlat         : 0.05
! spacing:
grid.nx           :  140
grid.ny           :  180
#else
#error unsupported grid.name "${grid.name}"
#endif

! domain name in LEIP input:
my.leip.region     :  europe_w30e70s5n75


!
! ~ or define the keys below ..
!

!! box within wrf grid:
!!   [-15,30] x [40,65] =  45 x 25 deg
!!  at 1/2 x 1/4 deg = 90 x 100 cells
!
!! define grid type:
!grid.type           :  cartesian
!grid.meteo_mapping  :  interpol
!

!! south west corner:
!grid.west         : -15.0
!grid.south        :  40.0
!! resolution: 
!grid.dlon         : 0.50
!grid.dlat         : 0.25
!! spacing:
!grid.nx           :  90
!grid.ny           : 100
!
!! domain name in LEIP input:
!my.leip.region     :  europe_w30e70s5n75


!
! ~ subset of WRF grid
!

! define grid type:
!grid.type        :  non-cartesian
!
!! sample file:
!grid.file.name         :  /data/WRF/wrfout_d02_2014-01-01_00:00:00
!! sample variable:
!grid.file.var          :  var_name=HGT
!! subset [i1,i2,j1,j2], negatives for all :
!grid.file.subset       :  -999 -999 -999 -999
!grid.file.subset       :  50 110 50 150


! ----------------------------------------
! vertical levels
! ----------------------------------------

!
! which type of model levels?
! number of levels?
!
!~ LE original:
!levels.type                :  mixlayer
!~ Hybrid sigma pressure levels
!levels.type                :  hyblevel 
!~ Input meteo levels aka the met12 is the new metlevel
levels.type                :  metlevel
! ~ input meteo 12 levels
!levels.type 				:  met12

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#if "${levels.type}" == "mixlayer"
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

! number of model layers:
!levels.nz                 :  4
levels.nz                 :  5
!levels.nz                 :  8

! total number of layers including "top",
! should be nz+1 currently:
levels.nz_top             :  $(( ${levels.nz} + 1 ))
!
! calculation of diffusion
!   msp    : corrected values for kz with respect to height difference between surface/mixing layer
!   normal : 'Real' kz values, diffusion calculated by ghost points to correct height differences between layers
vdiff.kz_type             : msp
!vdiff.kz_type             : normal 
!
! mixlayer level definition, used by routine 'MixlayerVertexHeights' :
!       :
!  [ ------  top(5) ]
! 
!    ------  top(4)
!       ___           "resid2"
!    ---              "resid1"
!       ___  blh
!    __/              "max"
!    ------  dsurf
! -------------------
!~ top of surface layer:
mixlayer.surf_top              :  25.0
! minimum top of mix layer:
mixlayer.mix_topmin            :   50.0
!~ top heights from 4th onwards ;
! minimum thicknes of layers above mix,
! and factors for orography std.dev. added to this:
#if "${levels.nz}" == "4"
mixlayer.top                   :  3500.0
mixlayer.dmin                  :  500.0
mixlayer.sdofac                :  1.0
#elif "${levels.nz}" == "5"
mixlayer.top                   :  3500.0 5000.0
mixlayer.dmin                  :  500.0
mixlayer.sdofac                :  1.0 0.5
#elif "${levels.nz}" == "8"
mixlayer.top                   :  3500.0 5000.0 6500.0 8000.0 10000.0
mixlayer.dmin                  :  500.0
mixlayer.sdofac                :  1.0 0.5 0.0 0.0 0.0
#else
#error could not level tops for levels.nz "${levels.nz}"
#endif
! thickness of layer to hold aloft boundary conditions:
mixlayer.daloft                :  1000.0

! !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
! #elif "${levels.type}" == "metlevel"
! !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

! ! Level definition similar as in meteo model.

! ! number of layers that should be used:
! levels.nz                     :  15
! ! layer combination, empty for no combination:
! metlevel.combine              :  

! ! total number of layers including "top",here nz+1:
! levels.nz_top                 :  $(( ${levels.nz} + 1 ))
! ! layer combination, empty for no combination:
! metlevel.combine_top          :   

! ! calculation of diffusion, only normal available (msp: specific for 5-layer (mixing layer) scheme)
! vdiff.kz_type                 :  normal

!..........................
#elif "${levels.type}" == "metlevel"
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

! Level definition similar as in meteo model.

! number of layers that should be used:
levels.nz                     :  12
! layer combination, empty for no combination:
metlevel.combine      :  1 1 1 2 2 2 2 2 2 2 2 2

! total number of layers including "top",here nz+1:
levels.nz_top                 :  $(( ${levels.nz} + 6 ))
! layer combination, empty for no combination:
metlevel.combine_top  :  1 1 1 2 2 2 2 2 2 2 2 2  3 3 3 4 4 4

! calculation of diffusion, only normal available (msp: specific for 5-layer (mixing layer) scheme)
vdiff.kz_type                 :  normal


!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#elif "${levels.type}" == "hyblevel"
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

! Hybride sigma-pressure

! table with half level coefficients, relative to 'run' subdir in rundir:
hyblevel.coefficients         :  ../build/data/hyblevel__L137_CL42__ml10p05.csv

! select lowest 10 layers only (top at ~175 hPa):
levels.nz                     :  10

! total number of layers for full atmosphere:
levels.nz_top                 :  15

! calculation of diffusion, only normal available:
vdiff.kz_type                 :  normal

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#else
#error unknown level type described
#endif
!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


! ----------------------------------------
! vertical diffusion
! ----------------------------------------

! how to compute stability:
!~ using exposure classes (original)
my.stab_type          : monin-exposure
!~ implementation of IFS method:
!my.stab_type          : monin-ifs


! ----------------------------------------
! data
! ----------------------------------------

! definition of model data fields, currently meteo:
#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-data-meteo-${my.meteo}.rc


! ----------------------------------------
! meteo
! ----------------------------------------

! which meteo?
my.meteo          :  ecmwf
!my.meteo          :  wrf

! include detailed settings:
#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-meteo-${my.meteo}.rc


! ----------------------------------------
! input collection
! ----------------------------------------

! location of LEIP produced input,
! region name is defined together with grid:
my.leip.dir        :  ${MODAS_SCRATCH}/models/LEIP/${my.leip.region}



! ######################################################################
! ###
! ### tracers
! ###
! ######################################################################

! Keywords to select tracers and reactions,
! in the tables found in the "groups" column.
! Group names supported by default (see expert.rc) :
!
!   cbm4              :  tracers/reactions of CBM4 scheme
!   sulphur           :  sulphur-only scheme (SO2 and SO4a, OH read)
!   methane           :  methane-only scheme (CH4, OH read)
!   co2               :  CO2 tracer
!   sf6               :  SF6 tracer
!   ppm               :  primary particulate matter
!   ec                :  elementary carbon
!   pom               :  primary organic matter
!   sia               :  secondary inorganic aerosols
!   seasalt           :  sodium aerosols representing seasalt
!   dust              :  dust aerosols
!   m7                :  M7 aerosol scheme (so4a, bc, oc, seasalt, dust)
!
!   basecation        :  base-cat-ion aerosols
!   hm                :  heavy metals
!   pollen            :  allergenic pollen tracers
!   ppm_ops			      :  primary-pm-tracers (4 size classes, following OPS model )
!
! * secondary organic aerosol:
!    - needs both 'vbs' and 'soa' groups
!    - emissions including residential wood combustion
!    - camx/wetdepos table including vbs tracers (default?)
!
!   soa               :  TERP reactions used as input to VBS
!   vbs               :  VBS tracers, TERP reactions used as input to VBS
! 
! * extra for output:
!
!   accum             :  accumulated species
!   biascorr          :  bias corrected species
!
! selected tracer groups:
genes.group.selected          :  cbm4 ppm ec pom sia seasalt accum biascorr

! skip some of the tracers ?
! (only used to check backwards compatibility):
genes.tracers.skip            :   


! ######################################################################
! ###
! ### sinks
! ###
! ######################################################################

! ----------------------------------------
! dry deposition
! ----------------------------------------

! compute ozone flux specials (T|F) ?
deposition.ozone_flux_specials   :  F

! NH4+/H+ ratio 
! File created from budget output 'drynhx' 
! from a run with gamma_water set to zero.
! ~ zero gamma_water for production of the 'drynhx' budgets:
!deposition.gammawater.file  :  zero
! ~ actual file:
#if "${my.domain}" == "EU" 
deposition.gammawater.file  :  ${my.data.dir}/ammonium/v3/gammawater_w30e56n29n70_050x025_v2.nc
#elif "${my.domain}" in ["DEU", "NL","NL_zoom","CAMS"]
deposition.gammawater.file  :  ${PROJECTS}/KIP/2020/Klimaat/Werkdocumenten/Nitrogen-deposition/preproc/gammawater/nc/gammawater_w0e18n45n58_0.025x0.0125_v2.nc
#else
#error unknown domain defined: ${my.domain}
#endif

! ----------------------------------------
! wet deposition
! ----------------------------------------

! wet deposition scheme:
!le.wet_depos.type         :  EMEP
le.wet_depos.type         :  CAMx

! data file with properties for wet deposition routine for CAMx
le.wet_depos.CAMx.datafile  : ${my.data.dir}/wet_depos/CAMx/depos_data_wet_dry_v1.0.csv



! ######################################################################
! ###
! ### emissions
! ###
! ######################################################################

! List of available emissions:
! ~ anthropogenic reactive gasses and primary aerosols:
!     macc_iii         :   MACC-III 2000-2011
!     cams_v2_2_AP     :   CAMS/REG emissions, air pollutants
!     cams_v2_2_GHG    :   CAMS/REG emissions, green house gasses
!     cams_RWC_AP      :   including residential wood combustion
!     edgar            :   global inventory
!     ops              :   Emissions used by OPS-model
! ~ GrETa emissions for Germany:
!     CAMS-2015-base-GrETa-gridding
!     CAMS-2015-RWC-update-GrETa-gridding
! ~ biogenic:
!   ~ vegetation emissions, choose one of:
!       bio            :   isoprene and terpene emissions
!       megan          :   MEGAN bio emis model, instead of "bio"
!   ~ for NOx emissions
!       bio-no         :   parametrization by Yienger and Levy 
!   ~ wetland ch4 emissions
!       wetlands       :   WetCHARTs dataset
! ~ natural:
!     sea_salt
!     dust-wind
!     dust-resuspension
!     dust-agriculture
! ~ fires:
!     fire_macc_daily
!     fire_macc_hourly
!     fire_silam
! ~ pollen:
!     silam-pollen     : Pollen emissions following SILAM model, M.Sofiev
!
! ~ heavy metals:
!     hm              : Heavy metal emissions from MAPESI/PAREST database
!     hm-natural      : Natural Heavy metal emissions
!
! ~ testing:
!     point           : single point source
!
#if "${my.domain}" == "EU"
le.emis.sets         :  cams_v5_1_shipping_non_EU \
                        CAMS-REG_v5_1 \
                        bio \
                        bio-no \
                        sea_salt \
                        fire_macc_daily
#elif "${my.domain}" == "DEU"
le.emis.sets         :  cams_v5_1_shipping_non_EU \
                        CAMS-REG_v5_1_GrETa_ER \
                        bio \
                        bio-no \
                        sea_salt \
                        fire_macc_daily
#elif "${my.domain}" == "NL"
le.emis.sets         :  cams_v5_1_shipping_non_EU \
                        CAMS-REG_v5_1_GrETa_ER \
                        bio \
                        bio-no \
                        sea_salt \
                        fire_macc_daily
#elif "${my.domain}" == "NL_zoom"
le.emis.sets         :  cams_v4_1_shipping_non_EU \
                        cams_v4_1_GrETA_ER_1x1 \
                        bio \
                        bio-no \
                        sea_salt \
                        fire_macc_daily						
						
#else
#error unknown domain: "${my.domain}"
#endif                        
                      

! details per set:
!#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-emissions-v7.rc
!#include base/${my.le.patch}/rc/lotos-euros-emissions-v7.rc
!#include ${my.le.dir}/proj/nitrogen-deposition/emission-timing/${my.le.patch}/rc/lotos-euros-emissions-v7.rc
!#include proj/cso/${my.lekf.patch}/rc/lotos-euros-emissions-v7b.rc
#include proj/cso/${my.lekf.patch}/rc/lotos-euros-emissions-v8.rc

!#include ${my.le.dir}/proj/cams61/wp2/${my.le.patch}/rc/lotos-euros-emissions-v7.rc

! ######################################################################
! ###
! ### land use / vegetation
! ###
! ######################################################################

! which data set ?
my.landuse  : smiatek
!my.landuse  : glc

! Use Corine Landcover 2006? This landuse will overwrite the others for locations available in this file
le.landuse.corine.enabled    : T
! same but lazy to correct 
my.landuse.clc2006.enabled : T

! Landuse accumulation types for stomatal ozone deposition
le.landuse.accumulation.types        : 
!le.landuse.accumulation.types        : Wheat Beech Spruce Clover

! include detailed settings:
!#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-landuse.rc
!#include base/${my.le.patch}/rc/lotos-euros-landuse.rc
#include proj/cso/${my.lekf.patch}/rc/lotos-euros-landuse.rc

! Country fractions
le.country.fraction_file      :  ${my.data.dir}/Country_fractions/Europe/fractions_CAMSdomain_v3.nc

! ######################################################################
! ###
! ### boundary conditions
! ###
! ######################################################################

!
! Boundaries are filled from a number of sources:
!  ~~ climatologies:
!   clim-isak    : output from 2D Isaksen model
!   clim-const   : constant values for some aerosols, heavy-metals, and pops
!   clim-logan   : Logan ozone climatology; only within domain ewsn=[-25,70,18,70]
!   clim-emep    : EMEP report
!   clim-steady  : apply steady state to o3/no/no2
!  ~~ CAMS global CTM
!   data         : use le_data structures to read and remap
!                  boundary conditions from netcdf files
!  ~~ LOTOS-EUROS boundary conditions:
!   le           : output from previous LOTOS-EUROS run (conc-bound files)
!
! collected climatology boundary conditions:
!my.bound.clims    : clim-isak clim-const clim-logan clim-emep clim-steady
! extented domain to 72N, so not all of them fit (and not needed anyway ...)
my.bound.clims    : clim-isak clim-const clim-emep clim-steady
!
! Provide a list with sources to apply; later sources overwrite previous:
#if "${my.domain}" == "EU"
le.bound.types            :  ${my.bound.clims} data
#elif "${my.domain}" in ["DEU", "NL","NL_zoom"]
le.bound.types            :  ${my.bound.clims} data le
#else
#error unknown domain found: ${my.domain}
#endif
! ~~

! details of climatologies:
#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-bound-clim.rc

!~ cams/rea up to 2016, nrt later on:
#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-bound-cams-rea-nrt.rc

! ~~

! If a run from Lotos-Euros is used as boundary,
! specify the path/settings here:
#if "${my.domain}" == "EU"
le.bound.le.path          :  
le.bound.le.key           :  
le.bound.le.key.labeling  :  
#elif "${my.domain}" == "DEU"
le.bound.le.path          :  ${MODAS_SCRATCH}/projects/MFUND/LE-EU-${my.year}-ori_res/output
le.bound.le.key           :  model=LE;expid=LE-EU;name=conc-bound
le.bound.le.key.labeling  :  model=LE;expid=LE-EU;name=label-bound
#elif "${my.domain}" == "NL"
le.bound.le.path          :  ${MODAS_SCRATCH}/projects/MFUND/LE-DEU-${my.year}/output
le.bound.le.key           :  model=LE;expid=LE-DEU;name=conc-bound
le.bound.le.key.labeling  :  model=LE;expid=LE-DEU;name=label-bound
#elif "${my.domain}" == "NL_zoom"
le.bound.le.path          :  ${MODAS_SCRATCH}/projects/MFUND/LE-NL-${my.year}/output
le.bound.le.key           :  model=LE;expid=LE-NL;name=conc-bound
le.bound.le.key.labeling  :  model=LE;expid=LE-NL;name=label-bound
#else
#error unknown domain defined: "${my.domain}"
#endif
! ######################################################################
! ###
! ### radiation
! ###
! ######################################################################

! enabled (True|False) ?
my.with.radiation      :  False

! detailed settings:
#include ${my.le.dir}/base/${my.le.patch}/rc/lotos-euros-radiation.rc


! ######################################################################
! ###
! ### bias correction
! ###
! ######################################################################
!
! Surface ozone bias correction:
!   'none'
!   'o3_smogprog_v19'
!   'o3_smogprog_v110'
le.biascorr.surface_ozone     :  o3_smogprog_v110

!
! Total PM bias correction factor applied to total PM output and AOD.
!
!   1.0    : default, no 'none'
!   2.0    : quite good approximation for the missing PM ..
!
!le.biascorr.total_pm.factor   :  1.0
le.biascorr.total_pm.factor   :  2.0
!
!le.biascorr.aod.factor        :  1.0
le.biascorr.aod.factor        :  1.6


! ######################################################################
! ###
! ### Labeling
! ###
! ######################################################################

! enabled (True|False) ?
my.with.labeling    :  False

! Define number of labels (except the natural/ boundary / init and aloft label)
labels.nlabel : 2

! Define Labelled species
labels.labelled.specs : ${N_tracers} ${S_tracers} ${unreactive_tracers} 
                        !chemical_C_tracers
                      

! ######################################################################
! ###
! ### output
! ###
! ######################################################################

! settings for validation output:
!#include base/${my.lekf.patch}/rc/lotos-euros-${my.le.release}-output.rc
!#include proj/cams61_letkf/wp2/${my.lekf.patch}/rc/lotos-euros-output_oper.rc
#include proj/cso/${my.lekf.patch}/rc/lotos-euros-output_cso_no2_final.rc


! settings for labeling output:
#if "${my.with.labeling}" in ["True","T","yes"]
#include base/${my.le.patch}/rc/lotos-euros-output-label.rc
#endif

! to have your own specific output, either:
!  - create a new include file
!  - copy the required content from the template to here


! ######################################################################
! ###
! ### restart
! ###
! ######################################################################

! ~~ restore state from restart file ?

! start from restart files (T|F) ?
le.restart                    :  F

! place where restart are read from;
! file names : <model>_<expid>_<name>_<ccyymmdd>_<hhmm>.nc
le.restart.path               :  ${my.project.dir}/restart
le.restart.key                :  model=LE;expid=${run.id};name=state

! ~~ save new restart files ?

! write restart files (T|F) ? frequency in hours:
le.restart.save               :  T
le.restart.save.dhour         :  24.0

! place where restart files are written to;
! file names : <model>_<expid>_<name>_<ccyymmdd>_<hhmm>.nc
le.restart.save.path          :  ${my.project.dir}/restart
le.restart.save.key           :  model=LE;expid=${run.id};name=state


! ######################################################################
! ###
! ### end
! ###
! ######################################################################

